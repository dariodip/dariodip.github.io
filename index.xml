<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dario Di Pasquale</title>
    <link>/</link>
    <description>Recent content on Dario Di Pasquale</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 10 Jan 2020 17:05:35 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data structures with Go - Part II</title>
      <link>/posts/2020/01/data-structures-with-go-part-ii/</link>
      <pubDate>Fri, 10 Jan 2020 17:05:35 +0000</pubDate>
      
      <guid>/posts/2020/01/data-structures-with-go-part-ii/</guid>
      <description>Data Structures With Go - Part II In the previous post we discussed how to implement linear data structures with Go.
Now we will explore two more complex data structures: tree and graph.
Those structures are not Linear and can represent unstructured information. Both graphs and trees are the foundation of the graph theory and both can be used, essentially, to describe a kind of relation.
In the domain of mathematics and computer science, graph theory is the study of graphs that concerns with the relationship among edges and vertices.</description>
    </item>
    
    <item>
      <title>Data structures with Go - Part I</title>
      <link>/posts/2020/01/data-structures-with-go-part-i/</link>
      <pubDate>Fri, 03 Jan 2020 17:05:35 +0000</pubDate>
      
      <guid>/posts/2020/01/data-structures-with-go-part-i/</guid>
      <description>Data Structures With Go - Part I Data structures are everywhere. Every developer should know them, starting from the most common ones.
The data structure priorly describes how the data is organised, accessed, associated and processed.
Using data structures you can keep your data in memory and efficiently access them.
You should pick the data structure that is the most suitable for your purposes to minimize space in memory and access time.</description>
    </item>
    
    <item>
      <title>Binary Search with Go, Python and C</title>
      <link>/posts/2019/12/binary-search-with-go-python-and-c/</link>
      <pubDate>Sun, 01 Dec 2019 17:05:35 +0000</pubDate>
      
      <guid>/posts/2019/12/binary-search-with-go-python-and-c/</guid>
      <description>The Binary Search Algorithm The Binary Search Algorithm is a search algorithm that works for sorted collections (e.g. sorted arrays). It takes as input a collection, the length of that collection and an element to find, and gives as output the index of the element in the collection (if it exists).
This algorithm is as efficient as easy to learn due to its simplicity.
This algorithm does only O(log n) comparisons.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>About me I am a passionate freelance software developer from Salerno currently living in Rome.
I have worked as a back-end developer for two years, using both Javascript (Node.js) and Python as languages, and both NoSQL (e.g. MongoDB) and SQL databases. I have occasionally worked as a front-end or mobile developer, even though I prefer back-end and systems developing.
I have also worked as a blockchain engineer since early 2019.</description>
    </item>
    
    <item>
      <title>Go Workshop 2019 References</title>
      <link>/gows/goref2019/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/gows/goref2019/</guid>
      <description>Go Language Tutorial  https://golang.org (official website) https://go-tour-ita.appspot.com/welcome/1 (an interactive tour through Go) http://www.golangbootcamp.com/ (comprehensive Go tutorial) https://blog.golang.org/ (official blog) https://golangcode.com/ (a library of useful Go snippets) https://golangbot.com/ (tutorials for beginners) https://appliedgo.net/ (tutorials and explanations for advanced users) https://changelog.com/gotime (Go podcast) https://dave.cheney.net/category/golang (another blog of Go) https://golang.ch/ (Go news, libraries and tutorials) https://www.golangprograms.com/ (Go blog and tutorials for mid-advanced users) https://medium.com/@trevor4e/learning-gos-concurrency-through-illustrations-8c4aff603b3 (clear explanation about Go concurrency) https://awesome-go.com/ (a list of Go frameworks and libraries) https://medium.</description>
    </item>
    
    <item>
      <title>Portfolio</title>
      <link>/portfolio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/portfolio/</guid>
      <description>Junior Solutions Architect @ Immobiliare.it Apr 2019 - Present Currently I am working as a Junior Solutions Architect for the R&amp;amp;D department of Immobiliare.it, helping Infrastructure Team in designing and developing systems spaning several fields.
I am mainly using the following programming languages:
 Golang C/C++ Python   Currently I am focusing on high-performance image processing, specialized backpressure routing algorithms and parallel/distributed computing.
BlockID Authentication Service over Blockchain May 2018 - Mar 2019 Designing Ethereum-based blockchain solutions aiming to address both privacy and scalability concerns.</description>
    </item>
    
  </channel>
</rss>